#!/usr/bin/env python2.4

'''
FictionBook2 -> TeX converter daemon

Author: Vadim Zaliva <lord@crocodile.org>
'''

import getopt
import logging, logging.handlers
import sys, os, os.path, shutil
import string, time
import urllib2, tempfile, cgi, urllib
import traceback
import zipfile

from xml.dom.minidom import parse, parseString
from ConfigParser import ConfigParser

from boto.connection import SQSConnection
from boto.sqs.message import Message
from boto.exception import SQSError, S3Error

from boto.connection import S3Connection
from boto.s3.key import Key

from fb2pdf.daemon import createDaemon

from fb2pdf import TemporaryError, PersistentError, tex2pdf, fb2tex

# --- Constants --- 

SUPPORTED_MSG_FORMAT_VER=[2,3]

# --- Defaults ---

pidfile='/var/run/updater.pid'
logfile = '/var/log/fbdaemon.log'
log_verbosity = logging.INFO

# --- Code ---

def usage():
    sys.stderr.write("Usage: fbdaemon.py -c cfgfile [-p pidfile] [-l logfile] [-v] [-d]\n")

def parseCommandLineAndReadConfiguration():
    global logfile
    global log_verbosity
    
    (optlist, arglist) = getopt.getopt(sys.argv[1:], "vdc:p:l:", ["verbose", "daemon", "cfgfile=", "pidfile=","logfile="])

    cfgfile = None
    do_daemon = False
    
    for option, argument in optlist:
        if option in ("-d", "--daemon"):
            do_daemon = True
        if option in ("-v", "--verbose"):
            log_verbosity = logging.DEBUG
        elif option in ("-c", "--cfgfile"):
            if os.path.isfile(argument):
                cfgfile = argument
            else:
                raise getopt.GetoptError("config file '%s' doesn't exist" % argument)
        elif option in ("-p", "--pidfile"):
            global pidfile
            pidfile = argument
        elif option in ("-l", "--logfile"):
            global logfile
            logfile = argument
                
    if cfgfile is None:
        raise getopt.GetoptError("configuration file not specified")

    if do_daemon:
        # Detach
        createDaemon()

        # change process name, important for init.d script on Linux
        if os.path.exists('/lib/libc.so.6'):
            libc = dl.open('/lib/libc.so.6')
            libc.call('prctl', 15, 'updater', 0, 0, 0)
        
        # write PID file
        p = open(pidfile, "w")
        p.write("%s\n" % os.getpid())
        p.close()

    global cfg
    cfg = ConfigParser()
    cfg.read(cfgfile)
    
    rotatingLog = logging.FileHandler(logfile)
    log_formatter = logging.Formatter('%(asctime)s %(levelname)-8s %(message)s')
    rotatingLog.setFormatter(log_formatter)
    logger=logging.getLogger('fbdaemon')
    logger.addHandler(rotatingLog)

    if not do_daemon:
        console = logging.StreamHandler()
        formatter = logging.Formatter('[%(levelname)s] %(message)s')
        console.setFormatter(formatter)
        logger.addHandler(console)

    logger.setLevel(log_verbosity)

def processMessage(m):
    logging.getLogger('fbdaemon').debug("Received new task")
    msg = None
    try:
        msg = parseString(m.get_body())
    except:
        logging.getLogger('fbdaemon').exception("Error parsing message body")
        logging.getLogger('fbdaemon').debug(m.get_body())
        raise PersistentError("Could not parse the message.")
        
    root = msg.childNodes[0]
    if root.nodeName != 'fb2pdfjob':
        raise PersistentError("Unknown XML root element '%s'." % root.nodeName)
    v=root.getAttribute('version')
    if v:
        ver = int(v)
    else:
        ver = 0
    if ver not in SUPPORTED_MSG_FORMAT_VER: 
        raise TemporaryError("Unsupported message format version '%s'." % v)

    srcs=root.getElementsByTagName('source')
    if len(srcs)!=1:
        raise PersistentError("Too many sources in the message.")
    src = srcs[0]
    src_url  = src.getAttribute('url')
    src_type = src.getAttribute('type')
    src_name = src.getAttribute('name')

    results=root.getElementsByTagName('result')
    if len(results)!=1:
        raise PersistentError("Message must contain exactly one 'result' element")
    res_key = results[0].getAttribute('key')
    res_encoding = str(results[0].getAttribute('encoding'))
    if len(res_encoding)==0:
        res_encoding=None

    logs=root.getElementsByTagName('log')
    if len(logs)!=1:
        raise PersistentError("Message must contain exactly one 'result' element")
    log_key = logs[0].getAttribute('key')

    cb=root.getElementsByTagName('callback')
    callbacks=[]
    for c in cb:
        x = {}
        x['url']    = c.getAttribute('url')
        if len(x['url'])==0:
            logging.getLogger('fbdaemon').warning("Missing callback 'url' attribute. Skipping")
        x['method'] = c.getAttribute('method')
        if len(x['method'])==0:
            x['method']='POST'
            logging.getLogger('fbdaemon').warning("Missing callback 'method' attribute. Assuming POST")
        p = c.getAttribute('params')        
        if len(p)>0:
            try:
                h = {}
                for (n,v) in cgi.parse_qsl(p, True, True):
                    h[n]=v
                x['params']=h
            except ValueError:
                raise PersistentError("Error parsing param string '%s'" % p)
        else:
            x['params']={}
        callbacks.append(x)

    processDocument(str(src_url), str(src_type), str(src_name),
                    str(res_key), res_encoding,
                    str(log_key),
                    callbacks)

def upload_file(bucket, key, filename, disp='attachment'):
    global cfg
    retries = int(cfg.get('storage','retries'))
    for i in range(retries):
        try:
            c = S3Connection(aws_access_key_id=cfg.get('aws','public'),
                             aws_secret_access_key=cfg.get('aws','private'))
            b = c.create_bucket(bucket)
            k = Key(b)
            k.key = key
            k.set_contents_from_filename(filename,{'Content-Disposition':'%s; filename=\"%s\"' % (disp,filename)})
            k.set_acl('public-read')
            return
        except S3Error, err:
            if i==(retries-1):
                raise TemporaryError("Error uploading file '%s' to S3" % filename, err)
            else:
                logging.getLogger('fbdaemon').exception("S3 upload error for file %s'. Retrying" % filename, err)
        except Exception, e:
            if i==(retries-1):
                raise TemporaryError("Error uploading file '%s' to S3" % filename, e)
            else:
                logging.getLogger('fbdaemon').exception("S3 upload error for file %s'. Retrying" % filename, e)

def processCallbacks(res_key, status, callbacks):
    if callbacks is None or len(callbacks)==0:
        return
    logging.getLogger('fbdaemon').debug("Processing callbacks")
    for c in callbacks:
        try:
            u = c['url']
            p = c['params']
            logging.getLogger('fbdaemon').debug("Calling callback %s" % u)
            p['key'] = res_key
            p['status'] = status
            pe = urllib.urlencode(p)
            logging.getLogger('fbdaemon').debug("Calling '%s' with '%s'" % (u,pe))
            if c['method']=='POST':
                csock = urllib2.urlopen(u, pe)
            else:
                csock = urllib2.urlopen(u + '?' + pe)
            csock.close()
        except:
            logging.getLogger('fbdaemon').exception("Error calling callback %s" % c['url'])

def processDocument(src_url, src_type, src_name, res_key, res_encoding, log_key, callbacks):
    try:
        logging.getLogger('fbdaemon').info("Processing '%s'." % src_name)
        tmpdirname = tempfile.gettempdir() + '/' + str(int(time.time()))
        logging.getLogger('fbdaemon').debug("Creating temporary directory '%s'." % tmpdirname)
        os.mkdir(tmpdirname)
        basedir = os.getcwd()
        global cfg
        bucket = cfg.get('storage','bucket')
        try:
            os.chdir(tmpdirname)
            fbfilename = src_name + '.fb2'
            logging.getLogger('fbdaemon').debug("Downloading '%s' to file '%s'." % (src_url, fbfilename))

            try:
                fsock = open(fbfilename,'wb')
                try:
                    asock = urllib2.urlopen(src_url)
                    shutil.copyfileobj(asock, fsock)
                finally:
                    fsock.close()
            except urllib2.HTTPError, e:
                if e.code==404 or e.code==403:
                    raise PersistentError("Error getting FB2 file", e)
                else:
                    raise TemporaryError("Error getting FB2 file", e)
            except:
                raise TemporaryError("Error getting FB2 file")

            texfilename = src_name + '.tex'
            logfilename = src_name + '.txt'
            pdffilename = src_name + '.pdf'

            # Individual log file
            lh = logging.FileHandler(logfilename)
            lf = logging.Formatter('%(asctime)s %(levelname)-8s %(message)s')
            lh.setFormatter(lf)
            logging.getLogger('fb2pdf').addHandler(lh)
            logging.getLogger('fb2pdf').setLevel(logging.DEBUG)

            try:
                try:
                    logging.getLogger('fbdaemon').debug("Converting to TeX")
                    fb2tex.fb2tex(fbfilename, texfilename)

                    logging.getLogger('fbdaemon').debug("Converting to PDF")
                    tex2pdf.tex2pdf(texfilename, pdffilename)

                    resfilename = pdffilename
                    
                    if res_encoding is not None:
                        if res_encoding=='application/zip':
                            try:
                                zipfilename = pdffilename + '.zip'
                                logging.getLogger('fbdaemon').debug("Creating ZIP '%s'" % zipfilename)
                                z=zipfile.ZipFile(zipfilename,'w',compression=zipfile.ZIP_DEFLATED)
                                z.write(pdffilename)
                                z.close()
                                resfilename = zipfilename
                            except:
                                logging.getLogger('fb2pdf').exception("ZIP error")
                                raise PersistentError("ZIP error")
                        else:
                            raise PersistentError("Unsupporeted encoding '%s'" % res_encoding)
                    
                finally:
                    logging.getLogger('fb2pdf').removeHandler(lh)
                    lh.flush()
                    lh.close()
            except:
                # Conversion error, upload log
                logging.getLogger('fbdaemon').exception("Conversion Failed")
                upload_file(bucket, log_key, logfilename, 'inline')
                raise

            # all OK
            # upload PDF 
            logging.getLogger('fbdaemon').debug("Uploading resulting file to S3")
            upload_file(bucket, res_key, resfilename)
            # upoad log (log should be uploaded AFTER PDF)
            logging.getLogger('fbdaemon').debug("Uploading log to S3")
            upload_file(bucket, log_key, logfilename, 'inline')

            processCallbacks(res_key, 'r', callbacks)
        finally:
            logging.getLogger('fbdaemon').debug("Removing temp files")
            os.chdir(basedir)
            # remove temp files
            for f in os.listdir(tmpdirname):
                os.remove("%s/%s" % (tmpdirname,f))
            os.rmdir(tmpdirname)
    except:
        processCallbacks(res_key, 'e', callbacks)
        raise

def main():
    try:
        global cfg
        parseCommandLineAndReadConfiguration()

        logging.getLogger('fbdaemon').info("Starting")
            
        c = SQSConnection(aws_access_key_id=cfg.get('aws','public'), aws_secret_access_key=cfg.get('aws','private'))
        
        qname = cfg.get('queue','name')
        qtimeout = int(cfg.get('queue','timeout'))
        pdelay = int(cfg.get('queue','polling_delay'))

        q = c.create_queue(qname)

        while True:
            m = q.read(qtimeout)
            if m==None:
                time.sleep(pdelay)
            else:
                try:
                    processMessage(m)
                    q.delete_message(m)
                except TemporaryError, msg:
                    logging.getLogger('fbdaemon').exception(msg)
                    if msg.nested:
                        logging.getLogger('fbdaemon').exception("Cause", msg.nested)
                except PersistentError, msg:
                    logging.getLogger('fbdaemon').exception(msg)
                    if msg.nested:
                        logging.getLogger('fbdaemon').exception("Cause", msg.nested)
                    logging.getLogger('fbdaemon').debug("removing message due to persistent error")
                    q.delete_message(m)
                except:
                    logging.getLogger('fbdaemon').exception('Unknown Processing Error - treating as Persistent')
                    q.delete_message(m)
                    
    except getopt.GetoptError, msg:
        if len(sys.argv[1:]) > 0:
            print >>sys.stderr, "Error: %s\n" % msg
        else:
            usage()
        return 2
        
    except:
        info = sys.exc_info()
        traceback.print_exc()
        return 3

    
if __name__ == "__main__":
    sys.exit(main())
